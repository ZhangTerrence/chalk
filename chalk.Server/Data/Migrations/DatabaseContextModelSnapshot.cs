// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using chalk.Server.Data;

#nullable disable

namespace chalk.Server.Data.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<long>", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_role_claims_role_id");

                    b.ToTable("role_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_claims_user_id");

                    b.ToTable("user_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_logins_user_id");

                    b.ToTable("user_logins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_roles_role_id");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_user_tokens");

                    b.ToTable("user_tokens", (string)null);
                });

            modelBuilder.Entity("chalk.Server.Entities.Assignment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("AllowedAttempts")
                        .HasColumnType("integer")
                        .HasColumnName("allowed_attempts");

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 11, 26, 17, 23, 12, 126, DateTimeKind.Utc).AddTicks(5057))
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("due_date");

                    b.Property<int?>("MaxGrade")
                        .HasColumnType("integer")
                        .HasColumnName("max_grade");

                    b.Property<bool>("Open")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("open");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(31)
                        .HasColumnType("character varying(31)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 11, 26, 17, 23, 12, 126, DateTimeKind.Utc).AddTicks(5378))
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_assignments");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("ix_assignments_course_id");

                    b.ToTable("assignments", (string)null);
                });

            modelBuilder.Entity("chalk.Server.Entities.Attachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AssignmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("assignment_id");

                    b.Property<long?>("CourseModuleId")
                        .HasColumnType("bigint")
                        .HasColumnName("course_module_id");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 11, 26, 17, 23, 12, 130, DateTimeKind.Utc).AddTicks(8619))
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(31)
                        .HasColumnType("character varying(31)")
                        .HasColumnName("name");

                    b.Property<long?>("SubmissionId")
                        .HasColumnType("bigint")
                        .HasColumnName("submission_id");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 11, 26, 17, 23, 12, 130, DateTimeKind.Utc).AddTicks(8970))
                        .HasColumnName("updated_date");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("uri");

                    b.HasKey("Id")
                        .HasName("pk_attachments");

                    b.HasIndex("AssignmentId")
                        .HasDatabaseName("ix_attachments_assignment_id");

                    b.HasIndex("CourseModuleId")
                        .HasDatabaseName("ix_attachments_course_module_id");

                    b.HasIndex("SubmissionId")
                        .HasDatabaseName("ix_attachments_submission_id");

                    b.ToTable("attachments", (string)null);
                });

            modelBuilder.Entity("chalk.Server.Entities.Channel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CourseId")
                        .HasColumnType("bigint")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 11, 26, 17, 23, 12, 125, DateTimeKind.Utc).AddTicks(9801))
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(31)
                        .HasColumnType("character varying(31)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 11, 26, 17, 23, 12, 126, DateTimeKind.Utc).AddTicks(172))
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_channels");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("ix_channels_course_id");

                    b.ToTable("channels", (string)null);
                });

            modelBuilder.Entity("chalk.Server.Entities.ChannelParticipant", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint")
                        .HasColumnName("channel_id");

                    b.Property<long>("CourseRoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("course_role_id");

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("joined_date");

                    b.HasKey("UserId", "ChannelId")
                        .HasName("pk_channel_participants");

                    b.HasIndex("CourseRoleId")
                        .HasDatabaseName("ix_channel_participants_course_role_id");

                    b.HasIndex("ChannelId", "CourseRoleId")
                        .HasDatabaseName("ix_channel_participants_channel_id_course_role_id");

                    b.ToTable("channel_participants", (string)null);
                });

            modelBuilder.Entity("chalk.Server.Entities.ChannelRolePermission", b =>
                {
                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint")
                        .HasColumnName("channel_id");

                    b.Property<long>("CourseRoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("course_role_id");

                    b.Property<long>("Permissions")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("permissions");

                    b.HasKey("ChannelId", "CourseRoleId")
                        .HasName("pk_channel_role_permissions");

                    b.HasIndex("CourseRoleId")
                        .HasDatabaseName("ix_channel_role_permissions_course_role_id");

                    b.ToTable("channel_role_permissions", (string)null);
                });

            modelBuilder.Entity("chalk.Server.Entities.Course", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(31)
                        .HasColumnType("character varying(31)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 11, 26, 17, 23, 12, 125, DateTimeKind.Utc).AddTicks(3294))
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(31)
                        .HasColumnType("character varying(31)")
                        .HasColumnName("name");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint")
                        .HasColumnName("organization_id");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 11, 26, 17, 23, 12, 125, DateTimeKind.Utc).AddTicks(3616))
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_courses");

                    b.HasIndex("OrganizationId")
                        .HasDatabaseName("ix_courses_organization_id");

                    b.ToTable("courses", (string)null);
                });

            modelBuilder.Entity("chalk.Server.Entities.CourseModule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 11, 26, 17, 23, 12, 131, DateTimeKind.Utc).AddTicks(1396))
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(31)
                        .HasColumnType("character varying(31)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 11, 26, 17, 23, 12, 131, DateTimeKind.Utc).AddTicks(1772))
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_course_modules");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("ix_course_modules_course_id");

                    b.ToTable("course_modules", (string)null);
                });

            modelBuilder.Entity("chalk.Server.Entities.CourseRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 11, 26, 17, 23, 12, 128, DateTimeKind.Utc).AddTicks(1494))
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(31)
                        .HasColumnType("character varying(31)")
                        .HasColumnName("name");

                    b.Property<long>("Permissions")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("permissions");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 11, 26, 17, 23, 12, 128, DateTimeKind.Utc).AddTicks(1723))
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_course_roles");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("ix_course_roles_course_id");

                    b.ToTable("course_roles", (string)null);
                });

            modelBuilder.Entity("chalk.Server.Entities.Message", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint")
                        .HasColumnName("channel_id");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 11, 26, 17, 23, 12, 131, DateTimeKind.Utc).AddTicks(2907))
                        .HasColumnName("created_date");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1023)
                        .HasColumnType("character varying(1023)")
                        .HasColumnName("text");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 11, 26, 17, 23, 12, 131, DateTimeKind.Utc).AddTicks(3218))
                        .HasColumnName("updated_date");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_messages");

                    b.HasIndex("ChannelId", "UserId")
                        .HasDatabaseName("ix_messages_channel_id_user_id");

                    b.ToTable("messages", (string)null);
                });

            modelBuilder.Entity("chalk.Server.Entities.Organization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 11, 26, 17, 23, 12, 124, DateTimeKind.Utc).AddTicks(8735))
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(31)
                        .HasColumnType("character varying(31)")
                        .HasColumnName("name");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_id");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 11, 26, 17, 23, 12, 124, DateTimeKind.Utc).AddTicks(9100))
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_organizations");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_organizations_owner_id");

                    b.ToTable("organizations", (string)null);
                });

            modelBuilder.Entity("chalk.Server.Entities.OrganizationRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 11, 26, 17, 23, 12, 127, DateTimeKind.Utc).AddTicks(5427))
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(31)
                        .HasColumnType("character varying(31)")
                        .HasColumnName("name");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint")
                        .HasColumnName("organization_id");

                    b.Property<long>("Permissions")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("permissions");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 11, 26, 17, 23, 12, 127, DateTimeKind.Utc).AddTicks(5784))
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_organization_roles");

                    b.HasIndex("OrganizationId")
                        .HasDatabaseName("ix_organization_roles_organization_id");

                    b.ToTable("organization_roles", (string)null);
                });

            modelBuilder.Entity("chalk.Server.Entities.Submission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AssignmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("assignment_id");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 11, 26, 17, 23, 12, 126, DateTimeKind.Utc).AddTicks(8476))
                        .HasColumnName("created_date");

                    b.Property<string>("Feedback")
                        .HasColumnType("text")
                        .HasColumnName("feedback");

                    b.Property<int?>("Grade")
                        .HasColumnType("integer")
                        .HasColumnName("grade");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 11, 26, 17, 23, 12, 126, DateTimeKind.Utc).AddTicks(8813))
                        .HasColumnName("updated_date");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_submissions");

                    b.HasIndex("AssignmentId")
                        .HasDatabaseName("ix_submissions_assignment_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_submissions_user_id");

                    b.ToTable("submissions", (string)null);
                });

            modelBuilder.Entity("chalk.Server.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 11, 26, 17, 23, 12, 124, DateTimeKind.Utc).AddTicks(2888))
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(31)
                        .HasColumnType("character varying(31)")
                        .HasColumnName("display_name");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime?>("RefreshTokenExpiryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("refresh_token_expiry_date");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 11, 26, 17, 23, 12, 124, DateTimeKind.Utc).AddTicks(3290))
                        .HasColumnName("updated_date");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("chalk.Server.Entities.UserCourse", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint")
                        .HasColumnName("course_id");

                    b.Property<long>("CourseRoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("course_role_id");

                    b.Property<DateTime>("JoinedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 11, 26, 17, 23, 12, 127, DateTimeKind.Utc).AddTicks(8658))
                        .HasColumnName("joined_date");

                    b.HasKey("UserId", "CourseId")
                        .HasName("pk_user_courses");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("ix_user_courses_course_id");

                    b.HasIndex("CourseRoleId")
                        .HasDatabaseName("ix_user_courses_course_role_id");

                    b.ToTable("user_courses", (string)null);
                });

            modelBuilder.Entity("chalk.Server.Entities.UserOrganization", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint")
                        .HasColumnName("organization_id");

                    b.Property<DateTime>("JoinedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 11, 26, 17, 23, 12, 127, DateTimeKind.Utc).AddTicks(2622))
                        .HasColumnName("joined_date");

                    b.Property<long>("OrganizationRoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("organization_role_id");

                    b.HasKey("UserId", "OrganizationId")
                        .HasName("pk_user_organizations");

                    b.HasIndex("OrganizationId")
                        .HasDatabaseName("ix_user_organizations_organization_id");

                    b.HasIndex("OrganizationRoleId")
                        .HasDatabaseName("ix_user_organizations_organization_role_id");

                    b.ToTable("user_organizations", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<long>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_claims_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("chalk.Server.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_claims_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("chalk.Server.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_logins_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<long>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_roles_role_id");

                    b.HasOne("chalk.Server.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("chalk.Server.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_tokens_users_user_id");
                });

            modelBuilder.Entity("chalk.Server.Entities.Assignment", b =>
                {
                    b.HasOne("chalk.Server.Entities.Course", "Course")
                        .WithMany("Assignments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_assignments_courses_course_id");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("chalk.Server.Entities.Attachment", b =>
                {
                    b.HasOne("chalk.Server.Entities.Assignment", "Assignment")
                        .WithMany("Attachments")
                        .HasForeignKey("AssignmentId")
                        .HasConstraintName("fk_attachments_assignments_assignment_id");

                    b.HasOne("chalk.Server.Entities.CourseModule", "CourseModule")
                        .WithMany("Attachments")
                        .HasForeignKey("CourseModuleId")
                        .HasConstraintName("fk_attachments_course_modules_course_module_id");

                    b.HasOne("chalk.Server.Entities.Submission", "Submission")
                        .WithMany("Attachments")
                        .HasForeignKey("SubmissionId")
                        .HasConstraintName("fk_attachments_submissions_submission_id");

                    b.Navigation("Assignment");

                    b.Navigation("CourseModule");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("chalk.Server.Entities.Channel", b =>
                {
                    b.HasOne("chalk.Server.Entities.Course", "Course")
                        .WithMany("Channels")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("fk_channels_courses_course_id");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("chalk.Server.Entities.ChannelParticipant", b =>
                {
                    b.HasOne("chalk.Server.Entities.Channel", "Channel")
                        .WithMany("ChannelParticipants")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_channel_participants_channels_channel_id");

                    b.HasOne("chalk.Server.Entities.CourseRole", "CourseRole")
                        .WithMany("ChannelParticipants")
                        .HasForeignKey("CourseRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_channel_participants_course_roles_course_role_id");

                    b.HasOne("chalk.Server.Entities.User", "User")
                        .WithMany("ChannelParticipants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_channel_participants_users_user_id");

                    b.HasOne("chalk.Server.Entities.ChannelRolePermission", "ChannelRolePermission")
                        .WithMany("ChannelParticipants")
                        .HasForeignKey("ChannelId", "CourseRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_channel_participants_channel_role_permissions_channel_id_co");

                    b.Navigation("Channel");

                    b.Navigation("ChannelRolePermission");

                    b.Navigation("CourseRole");

                    b.Navigation("User");
                });

            modelBuilder.Entity("chalk.Server.Entities.ChannelRolePermission", b =>
                {
                    b.HasOne("chalk.Server.Entities.Channel", "Channel")
                        .WithMany("ChannelRolePermissions")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_channel_role_permissions_channels_channel_id");

                    b.HasOne("chalk.Server.Entities.CourseRole", "CourseRole")
                        .WithMany("ChannelRolePermissions")
                        .HasForeignKey("CourseRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_channel_role_permissions_course_roles_course_role_id");

                    b.Navigation("Channel");

                    b.Navigation("CourseRole");
                });

            modelBuilder.Entity("chalk.Server.Entities.Course", b =>
                {
                    b.HasOne("chalk.Server.Entities.Organization", "Organization")
                        .WithMany("Courses")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_courses_organizations_organization_id");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("chalk.Server.Entities.CourseModule", b =>
                {
                    b.HasOne("chalk.Server.Entities.Course", "Course")
                        .WithMany("CourseModules")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_course_modules_courses_course_id");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("chalk.Server.Entities.CourseRole", b =>
                {
                    b.HasOne("chalk.Server.Entities.Course", "Course")
                        .WithMany("CourseRoles")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_course_roles_courses_course_id");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("chalk.Server.Entities.Message", b =>
                {
                    b.HasOne("chalk.Server.Entities.Channel", "Channel")
                        .WithMany("Messages")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_messages_channels_channel_id");

                    b.HasOne("chalk.Server.Entities.ChannelParticipant", "ChannelParticipant")
                        .WithMany("Messages")
                        .HasForeignKey("ChannelId", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_messages_channel_participants_channel_id_user_id");

                    b.Navigation("Channel");

                    b.Navigation("ChannelParticipant");
                });

            modelBuilder.Entity("chalk.Server.Entities.Organization", b =>
                {
                    b.HasOne("chalk.Server.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_organizations_users_owner_id");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("chalk.Server.Entities.OrganizationRole", b =>
                {
                    b.HasOne("chalk.Server.Entities.Organization", "Organization")
                        .WithMany("OrganizationRoles")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_organization_roles_organizations_organization_id");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("chalk.Server.Entities.Submission", b =>
                {
                    b.HasOne("chalk.Server.Entities.Assignment", "Assignment")
                        .WithMany("Submissions")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_submissions_assignments_assignment_id");

                    b.HasOne("chalk.Server.Entities.User", "User")
                        .WithMany("Submissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_submissions_users_user_id");

                    b.Navigation("Assignment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("chalk.Server.Entities.UserCourse", b =>
                {
                    b.HasOne("chalk.Server.Entities.Course", "Course")
                        .WithMany("UserCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_courses_courses_course_id");

                    b.HasOne("chalk.Server.Entities.CourseRole", "CourseRole")
                        .WithMany("UserCourses")
                        .HasForeignKey("CourseRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_courses_course_roles_course_role_id");

                    b.HasOne("chalk.Server.Entities.User", "User")
                        .WithMany("UserCourses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_courses_users_user_id");

                    b.Navigation("Course");

                    b.Navigation("CourseRole");

                    b.Navigation("User");
                });

            modelBuilder.Entity("chalk.Server.Entities.UserOrganization", b =>
                {
                    b.HasOne("chalk.Server.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_organizations_organizations_organization_id");

                    b.HasOne("chalk.Server.Entities.OrganizationRole", "OrganizationRole")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_organizations_organization_roles_organization_role_id");

                    b.HasOne("chalk.Server.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_organizations_users_user_id");

                    b.Navigation("Organization");

                    b.Navigation("OrganizationRole");

                    b.Navigation("User");
                });

            modelBuilder.Entity("chalk.Server.Entities.Assignment", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("chalk.Server.Entities.Channel", b =>
                {
                    b.Navigation("ChannelParticipants");

                    b.Navigation("ChannelRolePermissions");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("chalk.Server.Entities.ChannelParticipant", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("chalk.Server.Entities.ChannelRolePermission", b =>
                {
                    b.Navigation("ChannelParticipants");
                });

            modelBuilder.Entity("chalk.Server.Entities.Course", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Channels");

                    b.Navigation("CourseModules");

                    b.Navigation("CourseRoles");

                    b.Navigation("UserCourses");
                });

            modelBuilder.Entity("chalk.Server.Entities.CourseModule", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("chalk.Server.Entities.CourseRole", b =>
                {
                    b.Navigation("ChannelParticipants");

                    b.Navigation("ChannelRolePermissions");

                    b.Navigation("UserCourses");
                });

            modelBuilder.Entity("chalk.Server.Entities.Organization", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("OrganizationRoles");

                    b.Navigation("UserOrganizations");
                });

            modelBuilder.Entity("chalk.Server.Entities.OrganizationRole", b =>
                {
                    b.Navigation("UserOrganizations");
                });

            modelBuilder.Entity("chalk.Server.Entities.Submission", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("chalk.Server.Entities.User", b =>
                {
                    b.Navigation("ChannelParticipants");

                    b.Navigation("Submissions");

                    b.Navigation("UserCourses");

                    b.Navigation("UserOrganizations");
                });
#pragma warning restore 612, 618
        }
    }
}
