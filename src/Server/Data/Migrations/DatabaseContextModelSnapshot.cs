// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Server.Data;

#nullable disable

namespace Server.Data.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<long>", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_identity_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("identity_roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_identity_roles_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_identity_roles_claims_role_id");

                    b.ToTable("identity_roles_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_claims_user_id");

                    b.ToTable("user_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_logins_user_id");

                    b.ToTable("user_logins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_user_identity_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_identity_roles_role_id");

                    b.ToTable("user_identity_roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_user_tokens");

                    b.ToTable("user_tokens", (string)null);
                });

            modelBuilder.Entity("Server.Data.Entities.Assignment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AssignmentGroupId")
                        .HasColumnType("bigint")
                        .HasColumnName("assignment_group_id");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("DueOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("due_on_utc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(31)
                        .HasColumnType("character varying(31)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on_utc");

                    b.HasKey("Id")
                        .HasName("pk_assignments");

                    b.HasIndex("AssignmentGroupId")
                        .HasDatabaseName("ix_assignments_assignment_group_id");

                    b.ToTable("assignments", (string)null);
                });

            modelBuilder.Entity("Server.Data.Entities.AssignmentGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(31)
                        .HasColumnType("character varying(31)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on_utc");

                    b.Property<int>("Weight")
                        .HasColumnType("integer")
                        .HasColumnName("weight");

                    b.HasKey("Id")
                        .HasName("pk_assignment_groups");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("ix_assignment_groups_course_id");

                    b.ToTable("assignment_groups", (string)null);
                });

            modelBuilder.Entity("Server.Data.Entities.Channel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CourseId")
                        .HasColumnType("bigint")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(31)
                        .HasColumnType("character varying(31)")
                        .HasColumnName("name");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint")
                        .HasColumnName("organization_id");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on_utc");

                    b.HasKey("Id")
                        .HasName("pk_channels");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("ix_channels_course_id");

                    b.HasIndex("OrganizationId")
                        .HasDatabaseName("ix_channels_organization_id");

                    b.ToTable("channels", (string)null);
                });

            modelBuilder.Entity("Server.Data.Entities.ChannelRolePermission", b =>
                {
                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint")
                        .HasColumnName("channel_id");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.Property<long>("Permissions")
                        .HasColumnType("bigint")
                        .HasColumnName("permissions");

                    b.HasKey("ChannelId", "RoleId")
                        .HasName("pk_channel_role_permissions");

                    b.ToTable("channel_role_permissions", (string)null);
                });

            modelBuilder.Entity("Server.Data.Entities.Course", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(31)
                        .HasColumnType("character varying(31)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean")
                        .HasColumnName("is_public");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(31)
                        .HasColumnType("character varying(31)")
                        .HasColumnName("name");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint")
                        .HasColumnName("organization_id");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on_utc");

                    b.HasKey("Id")
                        .HasName("pk_courses");

                    b.HasIndex("OrganizationId")
                        .HasDatabaseName("ix_courses_organization_id");

                    b.ToTable("courses", (string)null);
                });

            modelBuilder.Entity("Server.Data.Entities.File", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AssignmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("assignment_id");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_url");

                    b.Property<long?>("ModuleId")
                        .HasColumnType("bigint")
                        .HasColumnName("module_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(31)
                        .HasColumnType("character varying(31)")
                        .HasColumnName("name");

                    b.Property<long?>("SubmissionId")
                        .HasColumnType("bigint")
                        .HasColumnName("submission_id");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on_utc");

                    b.HasKey("Id")
                        .HasName("pk_files");

                    b.HasIndex("AssignmentId")
                        .HasDatabaseName("ix_files_assignment_id");

                    b.HasIndex("ModuleId")
                        .HasDatabaseName("ix_files_module_id");

                    b.HasIndex("SubmissionId")
                        .HasDatabaseName("ix_files_submission_id");

                    b.ToTable("files", (string)null);
                });

            modelBuilder.Entity("Server.Data.Entities.Message", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint")
                        .HasColumnName("channel_id");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1023)
                        .HasColumnType("character varying(1023)")
                        .HasColumnName("text");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on_utc");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_messages");

                    b.HasIndex("ChannelId")
                        .HasDatabaseName("ix_messages_channel_id");

                    b.HasIndex("UserId", "ChannelId")
                        .HasDatabaseName("ix_messages_user_id_channel_id");

                    b.ToTable("messages", (string)null);
                });

            modelBuilder.Entity("Server.Data.Entities.Module", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(31)
                        .HasColumnType("character varying(31)")
                        .HasColumnName("name");

                    b.Property<int>("RelativeOrder")
                        .HasColumnType("integer")
                        .HasColumnName("relative_order");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on_utc");

                    b.HasKey("Id")
                        .HasName("pk_modules");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("ix_modules_course_id");

                    b.ToTable("modules", (string)null);
                });

            modelBuilder.Entity("Server.Data.Entities.Organization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean")
                        .HasColumnName("is_public");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(31)
                        .HasColumnType("character varying(31)")
                        .HasColumnName("name");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_id");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on_utc");

                    b.HasKey("Id")
                        .HasName("pk_organizations");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_organizations_owner_id");

                    b.ToTable("organizations", (string)null);
                });

            modelBuilder.Entity("Server.Data.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CourseId")
                        .HasColumnType("bigint")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(31)
                        .HasColumnType("character varying(31)")
                        .HasColumnName("name");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint")
                        .HasColumnName("organization_id");

                    b.Property<long>("Permissions")
                        .HasColumnType("bigint")
                        .HasColumnName("permissions");

                    b.Property<int>("RelativeRank")
                        .HasColumnType("integer")
                        .HasColumnName("relative_rank");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on_utc");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("ix_roles_course_id");

                    b.HasIndex("OrganizationId")
                        .HasDatabaseName("ix_roles_organization_id");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("Server.Data.Entities.Submission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AssignmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("assignment_id");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<string>("Feedback")
                        .HasMaxLength(1023)
                        .HasColumnType("character varying(1023)")
                        .HasColumnName("feedback");

                    b.Property<int?>("Grade")
                        .HasColumnType("integer")
                        .HasColumnName("grade");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on_utc");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_submissions");

                    b.HasIndex("AssignmentId")
                        .HasDatabaseName("ix_submissions_assignment_id");

                    b.ToTable("submissions", (string)null);
                });

            modelBuilder.Entity("Server.Data.Entities.Tag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CourseId")
                        .HasColumnType("bigint")
                        .HasColumnName("course_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(31)
                        .HasColumnType("character varying(31)")
                        .HasColumnName("name");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint")
                        .HasColumnName("organization_id");

                    b.HasKey("Id")
                        .HasName("pk_tags");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("ix_tags_course_id");

                    b.HasIndex("OrganizationId")
                        .HasDatabaseName("ix_tags_organization_id");

                    b.ToTable("tags", (string)null);
                });

            modelBuilder.Entity("Server.Data.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(31)
                        .HasColumnType("character varying(31)")
                        .HasColumnName("display_name");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(31)
                        .HasColumnType("character varying(31)")
                        .HasColumnName("first_name");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(31)
                        .HasColumnType("character varying(31)")
                        .HasColumnName("last_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on_utc");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Server.Data.Entities.UserChannel", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint")
                        .HasColumnName("channel_id");

                    b.HasKey("UserId", "ChannelId")
                        .HasName("pk_user_channels");

                    b.HasIndex("ChannelId")
                        .HasDatabaseName("ix_user_channels_channel_id");

                    b.ToTable("user_channels", (string)null);
                });

            modelBuilder.Entity("Server.Data.Entities.UserCourse", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint")
                        .HasColumnName("course_id");

                    b.Property<int?>("Grade")
                        .HasColumnType("integer")
                        .HasColumnName("grade");

                    b.Property<DateTime?>("JoinedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("joined_on_utc");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("UserId", "CourseId")
                        .HasName("pk_user_courses");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("ix_user_courses_course_id");

                    b.ToTable("user_courses", (string)null);
                });

            modelBuilder.Entity("Server.Data.Entities.UserOrganization", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint")
                        .HasColumnName("organization_id");

                    b.Property<DateTime?>("JoinedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("joined_on_utc");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("UserId", "OrganizationId")
                        .HasName("pk_user_organizations");

                    b.HasIndex("OrganizationId")
                        .HasDatabaseName("ix_user_organizations_organization_id");

                    b.ToTable("user_organizations", (string)null);
                });

            modelBuilder.Entity("Server.Data.Entities.UserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.Property<long?>("CourseId")
                        .HasColumnType("bigint")
                        .HasColumnName("course_id");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint")
                        .HasColumnName("organization_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_roles_role_id");

                    b.HasIndex("UserId", "CourseId")
                        .HasDatabaseName("ix_user_roles_user_id_course_id");

                    b.HasIndex("UserId", "OrganizationId")
                        .HasDatabaseName("ix_user_roles_user_id_organization_id");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<long>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_identity_roles_claims_identity_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("Server.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_claims_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("Server.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_logins_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<long>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_identity_roles_identity_roles_role_id");

                    b.HasOne("Server.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_identity_roles_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("Server.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_tokens_users_user_id");
                });

            modelBuilder.Entity("Server.Data.Entities.Assignment", b =>
                {
                    b.HasOne("Server.Data.Entities.AssignmentGroup", null)
                        .WithMany("Assignments")
                        .HasForeignKey("AssignmentGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_assignments_assignment_groups_assignment_group_id");
                });

            modelBuilder.Entity("Server.Data.Entities.AssignmentGroup", b =>
                {
                    b.HasOne("Server.Data.Entities.Course", null)
                        .WithMany("AssignmentGroups")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_assignment_groups_courses_course_id");
                });

            modelBuilder.Entity("Server.Data.Entities.Channel", b =>
                {
                    b.HasOne("Server.Data.Entities.Course", null)
                        .WithMany("Channels")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_channels_courses_course_id");

                    b.HasOne("Server.Data.Entities.Organization", null)
                        .WithMany("Channels")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_channels_organizations_organization_id");
                });

            modelBuilder.Entity("Server.Data.Entities.ChannelRolePermission", b =>
                {
                    b.HasOne("Server.Data.Entities.Channel", null)
                        .WithMany("RolePermissions")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_channel_role_permissions_channels_channel_id");
                });

            modelBuilder.Entity("Server.Data.Entities.Course", b =>
                {
                    b.HasOne("Server.Data.Entities.Organization", null)
                        .WithMany("Courses")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_courses_organizations_organization_id");
                });

            modelBuilder.Entity("Server.Data.Entities.File", b =>
                {
                    b.HasOne("Server.Data.Entities.Assignment", null)
                        .WithMany("Files")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_files_assignments_assignment_id");

                    b.HasOne("Server.Data.Entities.Module", null)
                        .WithMany("Files")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_files_modules_module_id");

                    b.HasOne("Server.Data.Entities.Submission", null)
                        .WithMany("Files")
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_files_submissions_submission_id");
                });

            modelBuilder.Entity("Server.Data.Entities.Message", b =>
                {
                    b.HasOne("Server.Data.Entities.Channel", null)
                        .WithMany("Messages")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_messages_channels_channel_id");

                    b.HasOne("Server.Data.Entities.UserChannel", null)
                        .WithMany("Messages")
                        .HasForeignKey("UserId", "ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_messages_user_channels_user_id_channel_id");
                });

            modelBuilder.Entity("Server.Data.Entities.Module", b =>
                {
                    b.HasOne("Server.Data.Entities.Course", null)
                        .WithMany("Modules")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_modules_courses_course_id");
                });

            modelBuilder.Entity("Server.Data.Entities.Organization", b =>
                {
                    b.HasOne("Server.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_organizations_users_owner_id");
                });

            modelBuilder.Entity("Server.Data.Entities.Role", b =>
                {
                    b.HasOne("Server.Data.Entities.Course", null)
                        .WithMany("Roles")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_roles_courses_course_id");

                    b.HasOne("Server.Data.Entities.Organization", null)
                        .WithMany("Roles")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_roles_organizations_organization_id");
                });

            modelBuilder.Entity("Server.Data.Entities.Submission", b =>
                {
                    b.HasOne("Server.Data.Entities.Assignment", null)
                        .WithMany("Submissions")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_submissions_assignments_assignment_id");
                });

            modelBuilder.Entity("Server.Data.Entities.Tag", b =>
                {
                    b.HasOne("Server.Data.Entities.Course", null)
                        .WithMany("Tags")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_tags_courses_course_id");

                    b.HasOne("Server.Data.Entities.Organization", null)
                        .WithMany("Tags")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_tags_organizations_organization_id");
                });

            modelBuilder.Entity("Server.Data.Entities.UserChannel", b =>
                {
                    b.HasOne("Server.Data.Entities.Channel", "Channel")
                        .WithMany("Users")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_channels_channels_channel_id");

                    b.HasOne("Server.Data.Entities.User", "User")
                        .WithMany("DirectMessages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_channels_users_user_id");

                    b.Navigation("Channel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Server.Data.Entities.UserCourse", b =>
                {
                    b.HasOne("Server.Data.Entities.Course", "Course")
                        .WithMany("Users")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_courses_courses_course_id");

                    b.HasOne("Server.Data.Entities.User", "User")
                        .WithMany("Courses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_courses_users_user_id");

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Server.Data.Entities.UserOrganization", b =>
                {
                    b.HasOne("Server.Data.Entities.Organization", "Organization")
                        .WithMany("Users")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_organizations_organizations_organization_id");

                    b.HasOne("Server.Data.Entities.User", "User")
                        .WithMany("Organizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_organizations_users_user_id");

                    b.Navigation("Organization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Server.Data.Entities.UserRole", b =>
                {
                    b.HasOne("Server.Data.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_roles_role_id");

                    b.HasOne("Server.Data.Entities.UserCourse", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId", "CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_user_roles_user_courses_user_id_course_id");

                    b.HasOne("Server.Data.Entities.UserOrganization", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId", "OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_user_roles_user_organizations_user_id_organization_id");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Server.Data.Entities.Assignment", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("Server.Data.Entities.AssignmentGroup", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("Server.Data.Entities.Channel", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("RolePermissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Server.Data.Entities.Course", b =>
                {
                    b.Navigation("AssignmentGroups");

                    b.Navigation("Channels");

                    b.Navigation("Modules");

                    b.Navigation("Roles");

                    b.Navigation("Tags");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Server.Data.Entities.Module", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("Server.Data.Entities.Organization", b =>
                {
                    b.Navigation("Channels");

                    b.Navigation("Courses");

                    b.Navigation("Roles");

                    b.Navigation("Tags");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Server.Data.Entities.Submission", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("Server.Data.Entities.User", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("DirectMessages");

                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("Server.Data.Entities.UserChannel", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Server.Data.Entities.UserCourse", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Server.Data.Entities.UserOrganization", b =>
                {
                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
